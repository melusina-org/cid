#!/bin/sh

# admin_console — Start the Admin Console

# El Cid (https://github.com/melusina-conseil/cid)
# This file is part of El Cid.
#
# Copyright © 2017–2022 Michaël Le Barbier
# All rights reserved.

# This software is governed by the CeCILL-B license under French law and
# abiding by the rules of distribution of free software.  You can  use,
# modify and/ or redistribute the software under the terms of the CeCILL-B
# license as circulated by CEA, CNRS and INRIA at the following URL
# "https://cecill.info/licences/Licence_CeCILL-B_V1-en.txt"


: ${TOPLEVELDIR:=$(git rev-parse --show-toplevel)}
: ${TENANTBASEDIR:=${HOME}/Library/com.github.michipili.cid}
: ${subrdir:=${TOPLEVELDIR}/subr}
: ${servicedir:=${TOPLEVELDIR}/service}
: ${package:='cid'}
: ${dockerimage:='cid/operator'}
: ${_admin_user:='root'}
: ${_admin_interaction:=confirm}
: ${wlog_prefix:="admin_console: $$"}

. "${subrdir}/stdlib.sh"
. "${subrdir}/config.sh"
. "${subrdir}/service.sh"
. "${subrdir}/tenant.sh"


_admin_docker()
{
    docker run --rm\
           --user "${_admin_user}"\
	   --env "wlog_prefix=${wlog_prefix}"\
	   --volume "${subrdir}:/opt/cid/share/subr"\
	   --volume "${servicedir}:/opt/cid/share/service"\
           $(service_volume_docker_args)\
           --volume "$(tenant_backupdir):/opt/cid/var/backups"\
           --volume "$(tenant_dir):/opt/cid/var/config"\
           "$@"
}

_admin_shell()
{
    _admin_docker -it "${dockerimage}" bash -l
}

_admin_devshell()
{
    _admin_docker\
        --volume "${TOPLEVELDIR}:/opt/cid/var/src/cid"\
        -it "${dockerimage}" bash -l
}

_admin_dump()
{
    if ! [ -d "$(tenant_backupdir)" ]; then
        failwith '%s: The backup directory does not exist.' "$(tenant_backupdir)"
    fi
    _admin_docker -it "${dockerimage}" cid_dump
}

_admin_restore()
{
    local dumpfile shortname
    case "$1" in
        /*)
            dumpfile="$1"
            ;;
        *)
            dumpfile="$(pwd -P)/$1"
            ;;
    esac
    shortname="${dumpfile##*/}"
    if [ -f "${dumpfile}" ]; then
        _admin_docker\
            --volume "${dumpfile}:/var/backups/${shortname}:ro"\
            -it "${dockerimage}" cid_restore "/var/backups/${shortname}"
    else
        failwith '%s: Cannot restore, file not found.' "${dumpfile}"
    fi
}

_admin_rm()
{
    case "${_admin_interaction}" in
        confirm)
            confirm '%s: Remove data volumes for this tenant.' "$(tenant_name)";;
        yes)
            : 'NOP'
            ;;
        no)
            failwith '_admin_rm: Interaction set to no, abort.'
            ;;
    esac

    service_volume_list "$(tenant_name)" | awk -F '|' '
BEGIN {
  docker_volume_ls = sprintf("docker volume ls --format \047{{.Name}}\047")
  while((docker_volume_ls | getline v) > 0 ) {
    volume[v]
  }
}

$1 in volume
'\
	| xargs docker volume rm
}

_admin_maybe_docker_volume_create()
{
    if ( docker volume ls --format '{{.Name}}' | grep -q -F "$1" ); then
	:
    else
	wlog 'Info' '%s: Create docker volume.' "$1"
	docker volume create "$1" 1>/dev/null
    fi
}


_admin_configure()
{
    local volume

    service_wizard

    service_volume_list "$(tenant_name)" | while read volume; do
        _admin_maybe_docker_volume_create "${volume}"
    done

    _admin_docker -it "${dockerimage}" cid_configure
}

_admin_test()
{
    :
    service_volume_database "$(tenant_name)"
}

_admin_usage()
{
    iconv -f utf-8 <<EOF
Usage: admin_console [-h] [-d]
 Administrator console
Options:
 -h Display this help message.
 -d Start development shell.
 -B Batch mode.
Environment:
 This admin console requires the CID_TENANT_DIR to be set. See tenant_shell.
EOF
}

_admin_list_tenants()
{
    if [ -d "${TENANTBASEDIR}" ] && [ -x "${TENANTBASEDIR}" ]; then
	(cd "${TENANTBASEDIR}" && ls -1)
    fi
}


_admin_main()
{
    local OPTIND OPTION OPTARG

    subcommand='shell'
    OPTIND=1

    while getopts 'Bb:c:dh' OPTION; do
        case ${OPTION} in
            c)	config_dir="${OPTARG%/}";;
            b)	config_backupdir="${OPTARG}";;
	    B)	_admin_interaction='yes';;
            d)	subcommand='devshell';;
            h)	_admin_usage; exit 0;;
            *)	failwith -x 64 '_admin_console: %s: Unsupported option.' "${OPTION}";;
        esac
    done
    shift $(expr ${OPTIND} - 1)

    service_load

    case "$#-$1" in
	1-ls|1-list_tenants)
            subcommand="list_tenants"
            shift
	    ;;
        1-configure|1-dump|2-restore|1-rm|1-shell|1-devshell|1-test)
	    : ${CID_TENANT_DIR:?This admin console requires the CID_TENANT_DIR to be set. See tenant_shell.}
	    config_file="${CID_TENANT_DIR}/cid.conf"
            subcommand="$1"
            shift    
            ;;
	0-)
	    : ${CID_TENANT_DIR:?This admin console requires the CID_TENANT_DIR to be set. See tenant_shell.}
	    config_file="${CID_TENANT_DIR}/cid.conf"
            shift    
            ;;
	*)
	    _admin_usage
	    exit 64
	    ;;
    esac

    wlog 'Debug' "CID_TENANT_DIR='%s'" "${CID_TENANT_DIR}"
    wlog 'Debug' "$(tenant_name)=%s" "$(tenant_name)" 
    wlog 'Debug' "subcommand='%s'" "${subcommand}"
    
    _admin_${subcommand} "$@"
}

_admin_main "$@"

# End of file `admin_console'
